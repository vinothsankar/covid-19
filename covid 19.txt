import warnings
import itertools
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
warnings.filterwarnings("ignore")
plt.style.use('fivethirtyeight')
import pandas as pd
import statsmodels.api as sm
import matplotlib
matplotlib.rcParams['axes.labelsize'] = 14
matplotlib.rcParams['xtick.labelsize'] = 12
matplotlib.rcParams['ytick.labelsize'] = 12
matplotlib.rcParams['text.color'] = 'k'




import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

df = pd.read_csv("../input/covid19-in-india/covid_19_india.csv")

df.head()

try :
    df.drop('Unnamed: 9',axis=1,inplace= True)
    df.shape
except : 
    print('Done')

    df.isnull().sum()
df.info()

df.describe()
df.corr()
print(df['Deaths'].unique())


try :
    a=[]
    for i in df['Deaths'].values:
        if '\xa0' in i:
            a.append(int(i.replace("\xa0", '')))
        else:
            a.append(int(i))

    df['Deaths'] = a
    len(a)
except:
    pass

print(df['Deaths'].unique())

df['Deaths'].astype('int64')
df['State/UnionTerritory'].unique()

len(df['State/UnionTerritory'].unique())

def drop_star(df):
    for i in df['State/UnionTerritory'].iteritems():
        if i[1][-3:] == "***":
            df.drop(i[0],inplace=True)
        
drop_star(df)
df['State/UnionTerritory'].unique()

len(df['State/UnionTerritory'].unique())

df['Cured'].plot(alpha=0.8)
df['Deaths'].plot(alpha=0.3)
df['Confirmed'].plot(alpha=0.5)
plt.show()

df.groupby('State/UnionTerritory')['Confirmed'].plot()
plt.show()
df.groupby('State/UnionTerritory')['Deaths'].plot()
plt.show()

df['Datetime'] = df['Date']+' '+df['Time']

l = df.groupby('State/UnionTerritory')
current = l.last()

fig ,ax = plt.subplots(figsize= (12,8))
plt.title('Top 10 Contaminated States')
current = current.sort_values("Confirmed",ascending=False)[:10]
p = sns.barplot(ax=ax,x= current.index,y=current['Confirmed'])
p.set_xticklabels(labels = current.index,rotation=90)
p.set_yticklabels(labels=(p.get_yticks()*1).astype(int))
plt.show()

l = df.groupby('State/UnionTerritory')
current = l.last()
current = current.sort_values("Confirmed",ascending=False)

df['Date'].min(), df['Date'].max()

Raj = df.loc[df['State/UnionTerritory'] == 'Tamil Nadu']
Raj.head()

Raj.shape

Raj.isnull().sum()

Raj.columns

cols=['Sno', 'Time', 'State/UnionTerritory',
       'ConfirmedIndianNational', 'ConfirmedForeignNational', 'Cured',
       'Deaths']
Raj['Date'] = Raj['Date']+' '+Raj['Time']
Raj.drop(cols, axis=1, inplace=True)
Raj= Raj.sort_values('Date')
Raj.isnull().sum()

Raj.head()

Raj.index

Raj = Raj.groupby('Date')['Confirmed'].sum().reset_index()


Raj = Raj.set_index('Date')
Raj.index = pd.to_datetime(Raj.index)
Raj.index

y = Raj['Confirmed'].resample('W').mean()

y.index

y.fillna(method='ffill',inplace=True)
y['2020':]

Raj.plot(figsize=(16, 6))
plt.show()


from pylab import rcParams
rcParams['figure.figsize'] = 18, 8
decomposition = sm.tsa.seasonal_decompose(y, freq = 20, model='additive')
fig = decomposition.plot()
plt.show()

p = d = q = range(0, 2)
pdq = list(itertools.product(p, d, q))
seasonal_pdq = [(x[0], x[1], x[2], 12) for x in list(itertools.product(p, d, q))]
print('Examples of parameter combinations for Seasonal ARIMA...')
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[1]))
print('SARIMAX: {} x {}'.format(pdq[1], seasonal_pdq[2]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[3]))
print('SARIMAX: {} x {}'.format(pdq[2], seasonal_pdq[4]))

for param in pdq:
    for param_seasonal in seasonal_pdq:
        try:
            mod = sm.tsa.statespace.SARIMAX(y,
                                            order=param,
                                            seasonal_order=param_seasonal,
                                            enforce_stationarity=False,
                                            enforce_invertibility=False)
            results = mod.fit()
            print('ARIMA{}x{}7 - AIC:{}'.format(param, param_seasonal, results.aic))
        except:
            continue

mod = sm.tsa.statespace.SARIMAX(y,
                                order=(0, 1, 1),
                                seasonal_order=(1, 1, 1, 12),
                                enforce_stationarity=False,
                                enforce_invertibility=False)
results = mod.fit()

pred = results.get_prediction(start=pd.to_datetime('2020-08-02'), dynamic=False)
pred_ci = pred.conf_int()
ax = y['2020':].plot(label='observed')
pred.predicted_mean.plot(ax=ax, label='One-step ahead Forecast', alpha=.7, figsize=(14, 7))
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.2)
ax.set_xlabel('Date')
ax.set_ylabel('Confirmed Cases')
plt.legend()
plt.show()

pred_uc = results.get_forecast(steps=50)
pred_ci = pred_uc.conf_int()
ax = y.plot(label='observed', figsize=(14, 7))
pred_uc.predicted_mean.plot(ax=ax, label='Forecast')
ax.fill_between(pred_ci.index,
                pred_ci.iloc[:, 0],
                pred_ci.iloc[:, 1], color='k', alpha=.25)
ax.set_xlabel('Date')
ax.set_ylabel('Confirmed Cases')
plt.legend()
plt.show() 